###################################


list=[ 1,2,[3,4,]]

def printlist(p):
    for e in p:
        print e

printlist(list)

################################### look at the variations in outout, first version is the correct version

# Define a procedure, sum_list,
# that takes as its input a
# list of numbers, and returns
# the sum of all the elements in
# the input list.


def sum_list(p):
         output=0
         for e in p:
             output=output+e
         return output

print sum_list([1, 7, 4])
#>>> 12

print sum_list([9, 4, 10])
#>>> 23

print sum_list([44, 14, 76])
#>>> 134

@@@@@look at output when you move the RETURN or when you add a PRINT and move the PRINT 
output=0
def sum_list(p):
         output=0
         for e in p:
             output=output+e
             return output  

def sum_list(p):
         output=0
         for e in p:
             output=output+e
             print output
             
def sum_list(p):
         output=0
         for e in p:
             output=output+e
         print output             
##########################################################################

# Define a procedure, measure_udacity,
# that takes as its input a list of strings,
# and returns a number that is a count
# of the number of elements in the input
# list that start with the uppercase 
# letter 'U'.


def measure_udacity(p):
    count=0
    for e in p:
        if e[0] == "U":
            count= count+1
    return (count)



print measure_udacity(['Dave','Sebastian','Katy'])
#>>> 0

print measure_udacity(['Umika','Umberto'])
#>>> 2
#################################################


# Define a procedure, find_element,
# that takes as its inputs a list
# and a value of any type, and
# returns the index of the first
# element in the input list that
# matches the value.

# If there is no matching element,
# return -1.

def find_element(p,a):
        x=0  
        for e in p:
            if a==e:             
                return x   
            x=x+1
        return-1               
        
print find_element([1,2,3],3)
#>>> 2

print find_element(['alpha','beta'],'gamma')
#>>> -1
#########################lists##########





p=[1,2,3,4]

print 5 not in p

print 5 in p

print 3 in p

print p.index(2)
print p.index(5)

True
False
True
1
error

##############################alternative to previous#######

# Define a procedure, find_element,
# using index that takes as its
# inputs a list and a value of any
# type, and returns the index of
# the first element in the input
# list that matches the value.

# If there is no matching element,
# return -1.

def find_element(p,a):
           
            if a in p:
                   return p.index(a) #return the index posotion that contains "a"
            else:
                    return -1

print find_element([1,2,3],3)
#>>> 2

print find_element(['alpha','beta'],'gamma')
#>>> -1

################# union of two lists ####
a=[1,2,3,4]
b=[2,4,6,2,8]

def union (a,b):
    x=0
    while x < len(b):
        if b[x] not in a: 
           a.append (b[x])
           x=x+1
        else:
            x=x+1
    return a            
 print union (a,b) 
###########cleaner version
# Define a procedure, union,
# that takes as inputs two lists.
# It should modify the first input
# list to be the set union of the two
# lists. You may assume the first list
# is a set, that is, it contains no 
# repeated elements.
a = [1,2,3]
b = [2,4,6]

   
   # compare each index of b with all of a
    #if they match add that index to a
    #if they dont match check the nedt one
    #if finished then return a
def union (a,b):
    x=0
    while x < len(b):
        if b[x] not in a: 
           a.append (b[x])
           x=x+1
        else:
            x=x+1
   
union(a,b)
print a 
#>>> [1,2,3,4,6]
print b
#>>> [2,4,6]
