
#######################################################################################################################
########### these are the extra questions at the end of lesson2 Udacity Intro to CS

############ add U to some string
def udacify(s):
    out= 'U'+s # no inverted commas 
    return out

print udacify ('turn')
#######################################################################################################################
############## output median of 3 numbers

###solution 1: not the most elegant

def bigger(a,b):
    if a > b:
        return a
    else:
        return b

def biggest(a,b,c):
    return bigger(a,bigger(b,c))

print biggest(3,5,2)

def smaller(a,b):
    if a < b:
        return a
    else:
        return b

def smallest(a,b,c):
    return smaller(a,smaller(b,c))

print smallest(3,5,2)

def biggest_and_smallest(a,b,c):
    return bigger(a,bigger(b,c)), smaller(a,smaller(b,c))

print biggest_and_smallest(3,5,2)


def median(a,b,c):
    x= bigger(a,bigger(b,c))
    y= smaller(a,smaller(b,c))
    other = (a+b+c-x-y)
    return other
    print other
   
print median (3,3,3)

######Soluton 2 ###logic is that the median is the biggest of the second two numbers, after eliminating the biggest of the three.

def bigger(a,b):
    if a > b:
        return a
    else:
        return b

def biggest(a,b,c):
    return bigger(a,bigger(b,c))


def median(a,b,c):
    big = biggest (a,b,c)
    if big == a: 
        return bigger (b,c)
    if big== b:
        return bigger (a,c)
    else:
        return bigger (a,b)
      
print median (3,5,7)
#######################################################################################################################
####### input a number and count it down to 1 then add blastoff#########less elegant solution

def countdown(a):
    while a > 0:
        print a
        a=a-1
        if a == 0:
            print 'Blastoff!'
            return a #without this return you get an infinite loop
        return countdown (a)
countdown (5)

#######################more elegant solution
def countdown(a):
    while a > 0:
        print a
        a=a-1
    print 'Blastoff!'

countdown (5)

##########################################################################################################3
####### find a search string within a string, print the last posotion of the seaerch string, or -1 if it is not found

def find_last(target_string,search_string):
    position = target_string.find(search_string)

    while position != -1:
        last_position = position
        position = target_string.find(search_string,position+1)         
        if position == -1:
           return last_position
    return position # so -1 is rertuned if the search string does not exist


print find_last('othis tis ta stest', 't')

print find_last('aaaa', 'b')  ###test for when string cannot be found


#############################################################################################################

# Define a procedure weekend which takes a string as its input, and
# returns the boolean True if it's 'Saturday' or 'Sunday' and False otherwise.

def weekend(day):
    if day == 'Saturday': 
        return True
    if day == 'Sunday': 
        return True
    else:
        return False
        
print weekend('Monday')
#>>> False

print weekend('Saturday')
#>>> True

print weekend('July')
#>>> False
##############################################################################################################

#accept a number of inputs
# store the number of inputs in a var
# put the numbers in order
# if odd number of numbers then  divide by 2 med= answer position +1 th number
# if even divide by 2, median = the numebr at that positin
    

def stamps(a):
    
    no_of_5s =  a//5 ##28/5=5
    if no_of_5s < 1 :
        no_of_5s=0
    if no_of_5s !=0:
        a = a-5*no_of_5s #28-25=3
   
    no_of_2s = a//2     
    if no_of_2s < 1:
            no_of_2s = 0
    if no_of_2s !=0:
            a = a-2*no_of_2s ##3-2=1

    no_of_1s = a/1
    return (no_of_5s,no_of_2s, no_of_1s)
      
     
print stamps(8)
#>>> (1, 1, 1)  # one 5p stamp, one 2p stamp and one 1p stamp
print stamps(5)
#>>> (1, 0, 0)  # one 5p stamp, no 2p stamps and no 1p stamps
print stamps(29)
#>>> (5, 2, 0)  # five 5p stamps, two 2p stamps and no 1p stamps
print stamps(0)
#>>> (0, 0, 0) # no 5p stamps, no 2p stamps and no 1p stamps
print stamps(4)  
print stamps(3)    
    
#############################################################################################################

# The range of a set of values is the maximum value minus the minimum
# value. Define a procedure, set_range, which returns the range of three input
# values.

# Hint: the procedure, biggest which you coded in this unit
# might help you with this question. You might also like to find a way to
# code it using some built-in functions.

def bigger(a,b):
    if a > b:
        return a
    else:
        return b

def biggest(a,b,c):
    return bigger(a,bigger(b,c))

print biggest(3,5,2)

def smaller(a,b):
    if a < b:
        return a
    else:
        return b

def smallest(a,b,c):
    return smaller(a,smaller(b,c))

print smallest(3,5,2)

def set_range(a,b,c):
    range= bigger(a,bigger(b,c))-smaller(a,smaller(b,c))
    return range


print set_range(10, 4, 7)
#>>> 6  # since 10 - 4 = 6

print set_range(1.1, 7.4, 18.7)
#>>> 17.6 # since 18.7 - 1.1 = 17.6
