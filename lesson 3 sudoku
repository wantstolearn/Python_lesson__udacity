

############first check a single line for duplicates##############333333

list1 =[1,2,3,4,5,6,7,8]

def check_sudoku(p):
    #ist is length n. compare 1st index with the rest, then second with the rest then third etc
    #contain 1 to n?
    n=len(p)
    x=-1
    y=0
    while x <n:
       x=x+1             # start at p[0] and p[1]
       y=x+1 
       while y<n:         # x is fixed then cycle throught the Y's
               if p[x] != p[y]:
                   y=y+1 
               else: 
                    return False
       #dont return anythign to this WHILE let the IF make the decision, if True, the program auto goes abck to the first while        
    return True
    
print check_sudoku(correct)       
############################################################################################################################
########### check one list with eg 3 sublists, so must track list length and sublist length#################################

list2 = [ [1,2,3,4,5,6,7,8] , [1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]]


print len(list2[0])     #just a reminder of structure of list/sublist
# think of sudoku block as one long list, each row = a position in the list, each colum is the nth position in the row  list

# the first code checked if everything in a list was different, 
#this second code it to do that for e.g. 3 sub lists ie check every digit in sublist 1 is differet, 
# check every digit in sublist 2 is different etc.


def check_sudoku(p):
    #ist is length n. compare 1st index with the rest, then second with the rest then third etc
    #contain 1 to n?
    z=0
    n=len(p[z])  #(z= sublist number, sudouk so we assume allways the same Lenght (and height) ie square not 8 in one subist and 3 in the other) 
    k=len(p)     #length of entire list, so eg length = 2 sublists but 8 in each sublist, 
    while z < k:
         
          print p[z]  #just to see what is happening
          print n     #just to see what is happening
          x=-1
          y=0
          while x <n:
               x=x+1             # start at p[0][0] and p[1][1]
               y=x+1 
               while y<n:         # # cycle through first sub list
                       if p[z][x] != p[z][y]:
                           y=y+1 
                       else: 
                            return False

               #dont return anythign to this WHILE let the IF make the decision, if True, the program auto goes abck to the first while        
          z=z+1
                                     
    return True

print check_sudoku(list2)       
################################################################################################################################################
############## add in column check 

list3 = [ [1,2,3] , 
         [2,3,1],
         [3,1,2]]

##3rd iteration, check if p00 = p10=p20 =pn0 then p01=p11=p21-pn1 eetc. up to N times 

def check_sudoku(p):
    #ist is length n. compare 1st index with the rest, then second with the rest then third etc
    #contain 1 to n?
    z=0
    n=len(p[z])  # z= sublist number, sudoku so we assume allways the same Lenght (and height) ie square not 8 in one subist and 3 in the other) 
    k=len(p)     #length of entire list, so eg length = 2 sublists but 8 in each sublist, 
    while z < k:
         
          print p[z]  #just to see what is happening
          print n     #just to see what is happening
          x=-1
          y=0
          while x <n:
               x=x+1             # start at p[0][0] and p[1][1]
               y=x+1 
               while y<n:         # # cycle through first sub list
                       if p[z][x] != p[z][y]:
                           y=y+1 
                       else: 
                            return False

               #dont return anythign to this WHILE let the IF make the decision, if True, the program auto goes abck to the first while        
          z=z+1

                        
    output = True
    if True: 
        print "So far so good" #this is just to prove I am moving to this part of the code to start the columns check
    #return output    no return here
    else:
        print"oops"
# start part 3 column check
    x=0
    while x< n: 
                z=0
                n= len(p)
                while z < n-1: #eg p00 - p10-p20 in a 3 length list ie n-3, n-1=2
                        print z    
                        if p[z][x] != p[z+1][x]:  #have to assume input is accurate ie 1-9 only
                            z=z+1
                            print z
                        else:
                            return False
                            #incrment x next 
                x=x+1             
    return True


print check_sudoku(list3)  
##################### this version adds a check to ensure the values are not out of range eg in a 1-4 soduku, u cant put in a 5##

list3 = [ [1,2,3] , 
         [2,3,1],
         [3,1,2]]
list4 = [[1,2,3,4], [2,4,1,3], [3,1,4,2], [4,3,2,1]]

###4th iteration add in check for numbers outside range, for letters , for non integers?

def check_sudoku(p):
    #ist is length n. compare 1st index with the rest, then second with the rest then third etc
    #contain 1 to n?
    z=0
    n=len(p[z])  # z= sublist number, sudoku so we assume allways the same Lenght (and height) ie square not 8 in one subist and 3 in the other) 
    k=len(p)     #length of entire list, so eg length = 2 sublists but 8 in each sublist, 
    while z < k:
          x=-1
          y=0
          while x <n:
               x=x+1             # start at p[0][0] and p[1][1]
               y=x+1 
               while y<n:         # # cycle through first sub list
                       if p[z][x] != p[z][y] and p[z][x]<n+1 and p[z][y]<n+1: #check for out of ranger numbers
                            print p[z][y]
                            y=y+1 
                       else: 
                            return False

               #dont return anythign to this WHILE let the IF make the decision, if True, the program auto goes abck to the first while        
          z=z+1
####check the columns next    
    x=0
    while x< n: 
                z=0
                n= len(p)
                while z < n-1: #eg p00 - p10-p20 in a 3 length list ie n-3, n-1=2
                         if p[z][x] != p[z+1][x] and p[z][x]<n+1: 
                            z=z+1
                         else:
                            return False
                x=x+1             
    return True
###.is_integer()
print check_sudoku(list4)
###############################add in integer check using modulo function########################


list3 = [ [1,2,3] , 
         [2,3,1],
         [3,1,2]]
list4 = [[1,2,3,4], [2,4,1,3], [3,1,4,2], [4,3,2,1]]

###4th iteration add in check for numbers outside range, for letters , for non integers?

def check_sudoku(p):
    #ist is length n. compare 1st index with the rest, then second with the rest then third etc
    #contain 1 to n?
    z=0
    n=len(p[z])  # z= sublist number, sudoku so we assume allways the same Lenght (and height) ie square not 8 in one subist and 3 in the other) 
    k=len(p)     #length of entire list, so eg length = 2 sublists but 8 in each sublist, 
    while z < k:
          x=-1
          y=0
          while x <n:
               x=x+1             # start at p[0][0] and p[1][1]
               y=x+1 
               while y<n:         # # cycle through first sub list
                       if p[z][x] != p[z][y] and p[z][x]<n+1 and p[z][y]<n+1 and p[z][x]%1==0 and p[z][y] %1==0: #check for out of ranger numbers and integers
                            print p[z][y]
                            y=y+1 
                       else: 
                            return False

               #dont return anythign to this WHILE let the IF make the decision, if True, the program auto goes abck to the first while        
          z=z+1
####check the columns next    
    x=0
    while x< n: 
                z=0
                n= len(p)
                while z < n-1: #eg p00 - p10-p20 in a 3 length list ie n-3, n-1=2
                         if p[z][x] != p[z+1][x] and p[z][x]<n+1 and p[z][x] %1==0: #check if integer
                            z=z+1
                         else:
                            return False
                x=x+1             
    return True
###.is_integer()
print check_sudoku(list4)
##################################### add check for non zero values and non negative values

list3 = [ [1,2,3] , 
         [2,3,1],
         [3,1,2]]
list4 = [[1,2,3,4], [2,4,1,3], [3,1,4,2], [4,3,2,1]]

###4th iteration add in check for numbers outside range, for letters , for non integers?

def check_sudoku(p):
    #ist is length n. compare 1st index with the rest, then second with the rest then third etc
    #contain 1 to n?
    z=0
    n=len(p[z])  # z= sublist number, sudoku so we assume allways the same Lenght (and height) ie square not 8 in one subist and 3 in the other) 
    k=len(p)     #length of entire list, so eg length = 2 sublists but 8 in each sublist, 
    while z < k:
          x=-1
          y=0
          while x <n:
               x=x+1             # start at p[0][0] and p[1][1]
               y=x+1 
               while y<n:         # # cycle through first sub list
                       if p[z][x] != p[z][y] and p[z][x]<n+1 and p[z][y]<n+1 and p[z][x]%1==0 and p[z][y] %1==0 and p[z][x] >0 and p[z][y] >0: #check for out of range numbers and integers and greate than zero ie not negative and not zero
                           
                            y=y+1
                       else: 
                            return False

               #dont return anythign to this WHILE let the IF make the decision, if True, the program auto goes abck to the first while        
          z=z+1
####check the columns next    
    x=0
    while x< n: 
                z=0
                n= len(p)
                while z < n-1: #eg p00 - p10-p20 in a 3 length list ie n-3, n-1=2
                         if p[z][x] != p[z+1][x]: #check if integer
                            z=z+1
                         else:
                            return False
                x=x+1             
    return True
###.is_integer()
print check_sudoku(list4)
