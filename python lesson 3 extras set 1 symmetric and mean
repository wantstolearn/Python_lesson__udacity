# A list is symmetric if the first row is the same as the first column,
# the second row is the same as the second column and so on. Write a
# procedure, symmetric, which takes a list as input, and returns the
# boolean True if the list is symmetric and False if it is not.

def symmetric(p):
                n=len(p)
                y=a=x=b=0
               
                if not p:
                   return True  # special case []- empty set case is ok for this definintion apparently to symmmetry
                
                if len(p)==1 : #special case when only 1 row with mutliple items but no coloumns = False but [1]= true
                   try:
                    print p[0][1]  # if [2] its true but if [1,2] its false***
                   except IndexError:
                    return True 
                else: #lenp==1
                        #main code here 
                        while x < n:  
                                       while  y  < n : 

                                                if p[x][y] == p[a][b]:
                                                    y=y+1
                                                    a=a+1

                                                else:
                                                    return False

                                       x=x+1
                                       b=b+1
                                       y=a=0 

                        return True #end main code
                return False # this covers the last exception of  the comment ***
    
    
print symmetric([[1,2,3]])
#>>> True

print symmetric([["cat", "dog", "fish"],
                ["dog", "dog", "fish"],
                ["fish", "fish", "cat"]])
#>>> True

print symmetric([["cat", "dog", "fish"],
                ["dog", "dog", "dog"],
                ["fish","fish","cat"]])
#>>> False

print symmetric([[1, 2],
                [2, 1]])
#>>> True

print symmetric([[1, 2, 3, 4],
                [2, 3, 4, 5],
                [3, 4, 5, 6]])
#>>> False

print symmetric([[1,2,3],
                 [2,3,1]])
#>>> False

print symmetric([[1,2,3,4]])
print symmetric([[1]])

################################################################################################# mean #######

# The mean of a set of numbers is the sum of the numbers divided by the
# number of numbers. Write a procedure, list_mean, which takes a list of numbers
# as its input and return the mean of the numbers in the list.

# Hint: You will need to work out how to make your division into decimal
# division instead of integer division. You get decimal division if any of
# the numbers involved are decimals.

def list_mean(p):
    
#mean = sum of all / number of them
# so mean = p(0)+..+p(len-1) / len p
    n = len(p)
    if n==0:
        string = "empty list, no mean"
        return string
    sum = 0.0
    i = 0
    while i < n:
        sum = sum + p[i]
        i = i+1
    mean = sum/n
    return mean
        
        
print list_mean([1,2,3,4])
#>>> 2.5
print list_mean([1,3,4,5,2])
#>>> 3.0
print list_mean([])
#>>> ??? You decide. If you decide it should give an error, comment
# out the print line above to prevent your code from being graded as
# incorrect.
print list_mean([2])
#>>> 2.0
